// components/PdfGenerator.jsx
import React from "react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const PdfGenerator = ({
  mealPlan,
  userProfile,
  bmi,
  heightDisplay,
  dietType,
}) => {
  const handleDownload = () => {
    const doc = new jsPDF();

    // Cover Page
    doc.setFillColor(240, 248, 255);
    doc.rect(
      0,
      0,
      doc.internal.pageSize.getWidth(),
      doc.internal.pageSize.getHeight(),
      "F"
    );

    doc.setFontSize(28);
    doc.setTextColor(30, 144, 255);
    doc.text("YOUR PERSONALIZED NUTRITION PLAN", 105, 40, { align: "center" });

    doc.setFontSize(22);
    doc.setTextColor(70, 70, 70);
    doc.text("Your Nutrition Blueprint", 105, 55, { align: "center" });

    doc.setFontSize(16);
    doc.setTextColor(100, 100, 100);
    doc.text("Precision-Fit Nutrition – Tailored Only for You.", 105, 65, {
      align: "center",
    });

    doc.setFontSize(18);
    doc.setTextColor(30, 144, 255);
    doc.text(`Welcome, ${userProfile?.name.split(" ")[0] || "User"}`, 20, 90);

    doc.setFontSize(14);
    doc.setTextColor(80, 80, 80);
    doc.text("Your 7-day diet plan based on:", 20, 100);

    autoTable(doc, {
      startY: 110,
      head: [["Metric", "Value"]],
      body: [
        ["Height", heightDisplay],
        ["Weight", `${userProfile?.weight} kg`],
        ["BMI", bmi],
      ],
      theme: "grid",
      headStyles: {
        fillColor: [220, 230, 240],
        textColor: [50, 50, 50],
        fontStyle: "bold",
      },
      bodyStyles: {
        fillColor: [255, 255, 255],
        textColor: [70, 70, 70],
      },
      margin: { left: 20 },
    });

    doc.setTextColor(60, 179, 113);
    doc.text(
      "This macro-optimized plan is engineered for effective body recomposition",
      20,
      150
    );
    doc.text("while maintaining energy levels.", 20, 158);

    doc.setFontSize(16);
    doc.setTextColor(255, 0, 0);
    doc.text("Medical Advisory", 20, 180);

    doc.setFontSize(12);
    doc.setTextColor(200, 0, 0);
    doc.text(
      "Consult your physician before beginning any nutritional program if you have:",
      20,
      188
    );

    const medicalConditions = [
      "Existing health conditions or allergies",
      "Are pregnant/nursing or taking medications",
      "History of eating disorders",
    ];

    medicalConditions.forEach((text, i) => {
      doc.setTextColor(255, 0, 0);
      doc.text("• " + text, 25, 198 + i * 8);
    });

    doc.setTextColor(100, 100, 100);
    doc.text(
      "Adjust portions as needed - this is your personal blueprint",
      20,
      225
    );

    // Plan Pages
    doc.addPage();
    let yPosition = 40;

    mealPlan.days.forEach((day, dayIndex) => {
      if (dayIndex > 0) doc.addPage();
      if (dayIndex > 0) yPosition = 40;

      doc.setFillColor(220, 230, 240);
      doc.rect(0, 0, doc.internal.pageSize.getWidth(), 30, "F");

      doc.setFontSize(20);
      doc.setTextColor(30, 144, 255);
      doc.text(`Day ${day.day}`, 20, 20);

      doc.setFontSize(12);
      doc.setTextColor(70, 70, 70);
      doc.text(
        `Diet Type: ${
          dietType === "vegetarian" ? "Vegetarian" : "Non-vegetarian"
        }`,
        160,
        20
      );

      Object.values(day.meals).forEach((meal) => {
        doc.setFontSize(16);
        doc.setTextColor(30, 144, 255);
        doc.text(meal.name, 20, yPosition);
        yPosition += 10;

        autoTable(doc, {
          startY: yPosition,
          head: [["Food Item", "Amount"]],
          body: meal.items.map((item) => [item.item, item.amount]),
          theme: "grid",
          headStyles: {
            fillColor: [220, 230, 240],
            textColor: [50, 50, 50],
            fontStyle: "bold",
          },
          bodyStyles: {
            fillColor: [255, 255, 255],
            textColor: [70, 70, 70],
          },
          margin: { left: 20 },
        });

        yPosition = doc.lastAutoTable.finalY + 10;

        if (meal.note) {
          doc.setFontSize(10);
          doc.setTextColor(60, 179, 113);
          doc.text(`Note: ${meal.note}`, 20, yPosition);
          yPosition += 10;
        }

        yPosition += 10;
      });

      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      doc.text("Generated by ZenMacros Nutrition Planner", 105, 280, {
        align: "center",
      });
      doc.text(new Date().toLocaleDateString(), 105, 285, { align: "center" });
    });

    doc.save(`ZenMacros_Plan_${userProfile?.name || "User"}.pdf`);
  };

  return (
    <div className="text-center my-6">
      <button
        onClick={handleDownload}
        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-300"
      >
        Download My Plan PDF
      </button>
    </div>
  );
};

export default PdfGenerator;
